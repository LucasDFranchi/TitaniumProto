/**
 * @file {{ package_name }}Protobuf.h
 * @brief Auto-generated header file generated.
 */

#ifndef {{ package_name | upper }}_PROTO_H
#define {{ package_name | upper }}_PROTO_H

#include "stdint.h"
#include "string.h"
#include "jsmn.h"

#ifndef PROTOBUFS_ERRORS_H
#define PROTOBUFS_ERRORS_H

enum protobufs_errors {
  PROTO_NO_ERROR   = 0,
  PROTO_INVAL_PTR  = -1,
  PROTO_OVERFLOW   = -2,
  PROTO_INVAL_SIZE = -3,
{%- if proto.json_enable %}
  PROTO_INVAL_NUM_TOKEN = -4
  PROTO_INVAL_JSON_KEY = -5
{%- endif %}
};

#endif // PROTOBUFS_ERRORS_H

class {{ package_name }}Protobuf {
public:
    {{ package_name }}Protobuf() = default;
    ~{{ package_name }}Protobuf() = default;
{% for field in fields %}
{%- if field.is_array %}
    static constexpr uint16_t {{ field.defined_size }} = {{ field.size }};
{%- endif %}
{%- endfor %}
{% for field in fields %}
{%- if field.is_array %}
    const {{ field.c_type_name }}* Get{{ field.capitalized_name }}(void) const { return this->{{ field.internal_name }}; }
{%- else %}
    {{ field.c_type_name }} Get{{ field.capitalized_name }}(void) const { return this->{{ field.internal_name }}; }
{%- endif %}
{%- endfor %}

    int16_t GetSerializedSize(void) const {
        return ({{ proto.serialized_size }});
    }

    int16_t GetMaxSize(void) const {
        return ({{ proto.maximum_size }});
    }

    static int16_t GetStaticMaxSize(void) {
        return ({{ proto.static_maximum_size }});
    }
{% for field in fields -%}
{%- if field.is_array %}
    int8_t Update{{ field.capitalized_name }}(const {{ field.c_type_name }}* value) {
        if (value == nullptr) {
            return PROTO_INVAL_PTR;
        }

        size_t value_length = strlen(value) + 1;

        if ((value_length == 0) || {{ field.defined_size }} == 0) {
            return PROTO_OVERFLOW;
        }

        if (value_length > {{ field.defined_size }}) {
            return PROTO_INVAL_SIZE;
        }

        memset(this->{{ field.internal_name }}, 0, {{ field.defined_size }});
        memcpy(this->{{ field.internal_name }}, value, value_length);

        return PROTO_NO_ERROR;
    }

    int8_t Update{{ field.capitalized_name }}(const {{ field.c_type_name }}* value, uint16_t string_size) {
        if (value == nullptr) {
            return PROTO_INVAL_PTR;
        }

        if ({{ field.defined_size }} == 0) {
            return PROTO_OVERFLOW;
        }

        if (string_size > {{ field.defined_size }}) {
            return PROTO_INVAL_SIZE;
        }

        memset(this->{{ field.internal_name }}, 0, {{ field.defined_size }});
        memcpy(this->{{ field.internal_name }}, value, string_size);

        return PROTO_NO_ERROR;
    }
{% else %}
    int8_t Update{{ field.capitalized_name }}({{  field.c_type_name }} value) {
        this->{{ field.internal_name }} = value;
        return PROTO_NO_ERROR;
    }
{% endif -%}
{% endfor %}
    int16_t Serialize(char* out_buffer, uint16_t out_buffer_size) const {
        if (out_buffer == nullptr) {
            return 0;
        }

        uint16_t serialized_size = {{ proto.serialized_size }};

        if (out_buffer_size < serialized_size) {
            return 0;
        }

        uint16_t offset = 0;
{% for field in fields -%}
{%- if field.is_array %}
        memcpy(&out_buffer[offset], this->{{ field.internal_name }}, strlen(this->{{ field.internal_name }}) + 1);
{%- if not loop.last %}
        offset += strlen(this->{{ field.internal_name }}) + 1;
{%- endif %}
{%- else %}
        memcpy(&out_buffer[offset], &this->{{ field.internal_name }}, sizeof(this->{{ field.internal_name }}));
{%- if not loop.last %}
        offset += sizeof(this->{{ field.internal_name }});
{%- endif %}
{%- endif %}
{%- endfor %}

        return serialized_size;
    }

    int8_t DeSerialize(const char* in_buffer, uint16_t in_buffer_size) {
        if (in_buffer == nullptr) {
            return PROTO_INVAL_PTR;
        }

        uint16_t deserialized_min_size = {{ proto.minimum_size }};
        uint16_t deserialized_max_size = {{ proto.maximum_size }};

        if ((in_buffer_size < deserialized_min_size) || (in_buffer_size > deserialized_max_size)) {
            return PROTO_INVAL_SIZE;
        }
{% for field in fields -%}
{%- if field.is_array %}
        memset(this->{{ field.internal_name }}, 0, {{ field.defined_size }});
{%- endif %}
{%- endfor %}

        uint16_t offset = 0;

{%- for field in fields %}
{%- if field.is_array %}
        memcpy(this->{{ field.internal_name }}, &in_buffer[offset], strlen(&in_buffer[offset]) + 1);
{%- if not loop.last %}
        offset += strlen(&in_buffer[offset]) + 1;
{%- endif %}
{%- else %}
        memcpy(&this->{{ field.internal_name }}, &in_buffer[offset], sizeof(this->{{ field.internal_name }}));
{%- if not loop.last %}
        offset += sizeof(this->{{ field.internal_name }});
{%- endif %}
{%- endif %}
{%- endfor %}

        return PROTO_NO_ERROR;
    }
{%- if proto.json_enable %}
    int32_t SerializeJson(char* out_buffer, uint16_t out_buffer_size) {
        uint32_t response_length = 0;

        do {
            if (out_buffer == nullptr) {
                break;
            }

            uint16_t serialized_size = {{ proto.serialized_size }};

            if (out_buffer_size < serialized_size) {
                return 0;
            }

            response_length = snprintf(out_buffer, out_buffer_size,
                                       this->_json_string,
{%- for field in fields %}
                                       this->{{ field.internal_name }}{% if not loop.last -%},{%- else %});{% endif -%}
{%- endfor %}
        } while (0);

        return response_length;
    }

    int8_t DeSerializeJson(const char* in_buffer, uint16_t in_buffer_size) {
        auto result = PROTO_NO_ERROR;
        jsmn_parser parser;
        jsmntok_t tokens[this->_NUM_TOKENS];

        jsmn_init(&parser);

        do {
            if (in_buffer == nullptr) {
                result = PROTO_INVAL_PTR;
                break;
            }

            auto num_tokens = jsmn_parse(&parser, in_buffer, strlen(in_buffer), tokens, this->_NUM_TOKENS);

            if (num_tokens != this->_NUM_TOKENS) {
                result = PROTO_INVAL_NUM_TOKEN;
                break;
            }

            jsmntok_t key{};
            jsmntok_t value{};
            uint16_t token_length = 0;

{%- for field in fields %}

            key   = tokens[this->{{ field.internal_name  | upper }}_TOKEN_ID];
            value = tokens[this->{{ field.internal_name  | upper }}_TOKEN_ID + 1];
            token_length = key.end - key.start;

            if (strncmp(in_buffer + key.start, this->{{ field.internal_name | upper }}_TOKEN_NAME, token_length) != 0) {
                result = PROTO_INVAL_JSON_KEY;
                break;
            }
{%- if field.is_array %}

            this->Update{{ field.capitalized_name }}(in_buffer + value.start, value.end - value.start);
{%- else %}

            this->Update{{ field.capitalized_name }}(atoi(in_buffer + value.start));
{%- endif %}
{%- endfor %}

            result = PROTO_NO_ERROR;

        } while(0);

        return result;
    }
{%- endif %}

private:
{%- for field in fields %}
    {{ field.c_type_name }} {{ field.internal_name }}{% if field.is_array %}[{{ field.size }}] = {0}{%- else %} = 0{% endif %};
{%- endfor %}

{%- if proto.json_enable %}
    const char* _json_string = R"({
{%- for field in fields %}
    "{{ field.token_name }}": {{ field.format_specifier }}{% if not loop.last -%},{% endif -%}
{%- endfor %}
})";

{%- for field in fields %}  
    const char* {{ field.internal_name | upper }}_TOKEN_NAME = "{{ field.token_name }}";
    const uint8_t {{ field.internal_name  | upper }}_TOKEN_ID = {{ field.token_id }};
{%- endfor %}
    const uint8_t _NUM_TOKENS  = {{ proto.num_tokens }};
};
{%- endif %}
#endif /* {{ package_name | upper }}_PROTO_H */
